{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1652,"byte_end":1658,"line_start":50,"line_end":50,"column_start":85,"column_end":91,"is_primary":true,"text":[{"text":"            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", chrono::Local::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;","highlight_start":85,"highlight_end":91}],"label":"use of unresolved module or unlinked crate `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `chrono`, use `cargo add chrono` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is an enum variant `git2::BranchType::Local` and 3 others; try using the variant's enum","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1652,"byte_end":1665,"line_start":50,"line_end":50,"column_start":85,"column_end":98,"is_primary":true,"text":[{"text":"            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", chrono::Local::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;","highlight_start":85,"highlight_end":98}],"label":null,"suggested_replacement":"git2::BranchType","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":1652,"byte_end":1665,"line_start":50,"line_end":50,"column_start":85,"column_end":98,"is_primary":true,"text":[{"text":"            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", chrono::Local::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;","highlight_start":85,"highlight_end":98}],"label":null,"suggested_replacement":"git2::ConfigLevel","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":1652,"byte_end":1665,"line_start":50,"line_end":50,"column_start":85,"column_end":98,"is_primary":true,"text":[{"text":"            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", chrono::Local::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;","highlight_start":85,"highlight_end":98}],"label":null,"suggested_replacement":"git2::build::CloneLocal","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:85\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", chrono::Local::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `chrono`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `chrono`, use `cargo add chrono` to add it to your `Cargo.toml`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is an enum variant `git2::BranchType::Local` and 3 others; try using the variant's enum\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", \u001b[0m\u001b[0m\u001b[38;5;9mchrono::Local\u001b[0m\u001b[0m::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", \u001b[0m\u001b[0m\u001b[38;5;10mgit2::BranchType\u001b[0m\u001b[0m::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", \u001b[0m\u001b[0m\u001b[38;5;9mchrono::Local\u001b[0m\u001b[0m::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", \u001b[0m\u001b[0m\u001b[38;5;10mgit2::ConfigLevel\u001b[0m\u001b[0m::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", \u001b[0m\u001b[0m\u001b[38;5;9mchrono::Local\u001b[0m\u001b[0m::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            run_git_command(&repo_path, &[\"commit\", \"-m\", &format!(\"Auto-sync: {}\", \u001b[0m\u001b[0m\u001b[38;5;10mgit2::build::CloneLocal\u001b[0m\u001b[0m::now().format(\"%Y-%m-%d %H:%M:%S\"))])?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0433`.\u001b[0m\n"}
