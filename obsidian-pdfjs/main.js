/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => PDFViewerPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/PDFViewer.ts
var import_obsidian = __toModule(require("obsidian"));
var PDFViewer = class extends import_obsidian.ItemView {
  constructor(leaf, pdfjsPath) {
    super(leaf);
    this.pdfjsPath = pdfjsPath;
  }
  getViewType() {
    return "pdf-viewer";
  }
  getDisplayText() {
    return "PDF Viewer";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.style.height = "100%";
    this.iframe = container.createEl("iframe", {
      attr: {
        style: "width: 100%; height: 100%; border: none;",
        src: this.pdfjsPath
      }
    });
  }
  async onClose() {
  }
  async loadPDF(pdfPath) {
    if (this.iframe) {
      const viewerUrl = `${this.pdfjsPath}?file=${encodeURIComponent(pdfPath)}`;
      this.iframe.src = viewerUrl;
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  pdfjsPath: "https://mozilla.github.io/pdf.js/web/viewer.html"
};
var PDFViewerPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView("pdf-viewer", (leaf) => new PDFViewer(leaf, this.settings.pdfjsPath));
    this.addCommand({
      id: "open-pdf-viewer",
      name: "Open PDF Viewer",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new PDFViewerSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType("pdf-viewer")[0];
    if (!leaf) {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({
        type: "pdf-viewer",
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
var PDFViewerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("PDF.js Path").setDesc("The path to the PDF.js viewer").addText((text) => text.setPlaceholder("Enter PDF.js viewer path").setValue(this.plugin.settings.pdfjsPath).onChange(async (value) => {
      this.plugin.settings.pdfjsPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
